#include "library.h"

void draw_floor(){
  set_heading_degrees(90.0);
  set_pen_width(4);
  set_pen_color(color::black);
  move_to(0.0, 380.0);
  draw_distance(800.0);
}

void draw_wall(int x){  // given start
  set_heading_degrees(0.0);
  move_to(x, 380);
  draw_distance(80.0);
  return;
}

int draw_bunker() {
  set_heading_degrees(0.0);
  set_pen_color(color::dark_grey);
  set_pen_width(2);

  const double minXSpace = 90.0;

  const double randNum = (double)random_in_range(140,690);  // can be between those two x values
  move_to(randNum, 380.0);
  draw_distance(40.0);
  turn_right_by_degrees(90.0);
  draw_distance(60.0);
  turn_right_by_degrees(90.0);
  draw_distance(40.0);
  // draw outline, now draw windows
  set_pen_color(color::black);
  // window 1
  move_to(randNum + 5.0, 380.0 - 15.0);
  set_heading_degrees(0.0);
  draw_distance(15.0);
  turn_right_by_degrees(90.0);
  draw_distance(20.0);
  turn_right_by_degrees(90.0);
  draw_distance(15.0);
  turn_right_by_degrees(90.0);
  draw_distance(20.0);
  // window 2
  move_to(randNum + 5.0 + 30.0, 380.0 - 15.0);
  set_heading_degrees(0.0);
  draw_distance(15.0);
  turn_right_by_degrees(90.0);
  draw_distance(20.0);
  turn_right_by_degrees(90.0);
  draw_distance(15.0);
  turn_right_by_degrees(90.0);
  draw_distance(20.0);
  
  draw_wall((randNum / 2) + 20);  // adds space back 

  return randNum;  // bunker start X
}

void make_base() {
  set_heading_degrees(0.0);
  set_pen_width(2.0);
  move_to(40.0 - 15.0, 380.0);
  start_shape();
  note_position();
  draw_distance(15.0);
  note_position();
  turn_right_by_degrees(90.0);
  draw_distance(30.0);
  note_position();
  turn_right_by_degrees(90.0);
  draw_distance(15.0);
  note_position();
  fill_shape();
}

void draw_and_move(double length, int nthTime) {
  if (nthTime > 0) {
    note_position();
    draw_distance(length);
    turn_right_by_degrees(1.0);
    draw_and_move(length, nthTime - 1);
  }
}

void make_circle_with_color(int r, int startX, int startY, int color) {
  const double pi = acos(-1.0);
  const double length = (2.0 * pi * r) / 360.0;
  
  move_to(startX, startY + r);
  set_heading_degrees(270);

  start_shape();
  draw_and_move(length, 360);
  set_pen_color(color);
  fill_shape();
}

void make_cannon(double x, double y, double a, double radius) {
  const double xg = x;
  const double yg = y - 15.0;  // puts on base
  const double pi = acos(-1.0);
  const double aDegrees = a * 180.0 / pi;
  const double xc = xg;
  const double yc = yg - radius;
  const double L1 = 2 * radius;
  const double L2 = 6 * radius;
  const double w1 = 2 * radius;
  const double w2 = 1.2 * radius;
  const double b = asin((w1-w2)/2/(L1+L2));
  const double bDegrees = b * 180.0 / pi;
  const double xp = xc - L1 * sin(a-b);
  const double yp = yc + L1 * cos(a-b);
  const double len = (L1+L2) * cos(b);
  const double d = sqrt(len*len + w1*w1/4);
  const double g = asin(w1/2/d);
  const double xe = xp + d * sin(a-g);
  const double ye = yp - d * cos(a-g);

  start_shape();
  move_to(xc, yc);
  set_heading_radians(a - b);
  note_position();
  draw_distance(L2);
  set_heading_radians(a - pi/2);
  note_position();
  draw_distance(w2);
  turn_left_by_radians(pi/2 - b);
  note_position();
  draw_distance(L1 + L2);
  note_position();
  move_to(xc, yc);
  set_heading_radians(a - b);
  turn_left_by_degrees(180);
  note_position();
  draw_distance(L1);
  turn_right_by_radians(pi/2 + b);
  note_position();
  draw_distance(w1);
  fill_shape();

  make_circle_with_color(radius, xc, yc, color::red);

  set_pen_color(color::black);

  move_to(xe, ye);
}

void make_cannon(double aRads){
  set_pen_width(1.0);
  make_cannon(40.0, 380.0, aRads, 10.0);
}

double xHeight(double Vx, double t, double xi) {
  return Vx * t + xi;
}

double yHeight(double Vy, double t, double yi) {
  return yi - (Vy * t - 4.9 * t * t);
}

int fireShot(int v, double aRads, double time, double xi, double yi, double wallX, double bunkerX) {
  const double Vx = v * sin(aRads);
  const double Vy = v * cos(aRads);
  const double HeightX = xHeight(Vx, time, xi);
  const double HeightY = yHeight(Vy, time, yi);

  if (HeightY >= 380){
    wait(0.5);
    make_console_active();
    print("\nYou hit the floor!");
    return 0;
  } else if ((HeightX >= wallX - 1.0 && HeightX <= wallX + 1.0) && HeightY >= 300.0) {  // wall is 80 high and floor is 20, so 400 - 100
    wait(0.5);
    make_console_active();
    print("\nYou hit the wall!");
    return 0;
  } else if ( (HeightX >= bunkerX - 1.0 && HeightX <= bunkerX + 1.0) && HeightY >= 340.0) {
    wait(0.5);
    make_console_active();
    print("\nYOU WIN!\nYou hit the side of the enemy base.");
    return 1;
  } else if ( (HeightX >= bunkerX - 1.0 && HeightX <= bunkerX + 61.0) && HeightY >= 340) {
    wait(0.5);
    make_console_active();
    print("\nYOU WIN!\nYou hit the top of the enemy base.");
    return 1;
  }

  set_pen_color(color::red);
  draw_to(HeightX, HeightY);
  wait(.00005);
  fireShot(v, aRads, time + .01, xi, yi, wallX, bunkerX);
}

int fire_once(double bunkerX, double wallX) {
  print("\n\nInitial Velocity? ");
  const int v = read_int();
  print("Firing Angle (degrees)? ");
  const int aDegrees = 90 - read_int();
  const double aRads = aDegrees * acos(-1.0) / 180.0;

  set_pen_color(color::black);
  make_cannon(aRads);

  const double xi = get_x_position();
  const double yi = get_y_position();

  return fireShot(v, aRads, 0.0, xi, yi, wallX, bunkerX);
}

void executeGame(int tries, int bunkerX, int wallX) {
  set_pen_color(color::red);

  const int fire_result = fire_once(bunkerX, wallX);

  if (tries >= 2 && fire_result != 1) {
    executeGame(tries - 1, bunkerX, wallX);
  } else if (tries <= 1) {
    print("\nNo more tries, sorry!");
    return;
   }
  return;
}

void playGame() {
  print("How many tries would you like (max 5)? ");
  const int tries = read_int();
  if (tries > 5) {
    print("Enter a smaller number.\n");
    playGame();
  } else if (tries <= 0) {
    print("Enter a larger number.\n");
    playGame();
  }

  srand(get_clock_time());
  make_base();
  const int bunkerX = draw_bunker();
  const int wallX = (bunkerX / 2) + 20;

  executeGame(tries, bunkerX, wallX);
  
  print("\n\nPlay again? ");
  const string response = read_string();
  if (response == "Yes" || response == "yes"  || response == "Y" || response == "y") {
    clear()
    draw_floor();
    make_console_active();
    
    playGame();
  }
}

void main() {
  make_window(800, 400);
  draw_floor();

  make_console_active();

  playGame();
}
